/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace CreditUnion {
  export type CreditStruct = {
    id: BigNumberish;
    amount: BigNumberish;
    term: BigNumberish;
    repaid: BigNumberish;
    name: string;
    member: string;
    approvedMembers: string[];
    confirmed: boolean;
    createdAt: BigNumberish;
    confirmedAt: BigNumberish;
  };

  export type CreditStructOutput = [
    number,
    number,
    number,
    number,
    string,
    string,
    string[],
    boolean,
    BigNumber,
    BigNumber
  ] & {
    id: number;
    amount: number;
    term: number;
    repaid: number;
    name: string;
    member: string;
    approvedMembers: string[];
    confirmed: boolean;
    createdAt: BigNumber;
    confirmedAt: BigNumber;
  };

  export type DepositStruct = {
    member: string;
    name: string;
    amount: BigNumberish;
    approvedMembers: string[];
    confirmed: boolean;
    createdAt: BigNumberish;
    confirmedAt: BigNumberish;
  };

  export type DepositStructOutput = [
    string,
    string,
    number,
    string[],
    boolean,
    BigNumber,
    BigNumber
  ] & {
    member: string;
    name: string;
    amount: number;
    approvedMembers: string[];
    confirmed: boolean;
    createdAt: BigNumber;
    confirmedAt: BigNumber;
  };

  export type MemberStruct = {
    contribution: BigNumberish;
    name: string;
    member: string;
    approvedMembers: string[];
    confirmed: boolean;
    created: boolean;
    joinedAt: BigNumberish;
  };

  export type MemberStructOutput = [
    number,
    string,
    string,
    string[],
    boolean,
    boolean,
    BigNumber
  ] & {
    contribution: number;
    name: string;
    member: string;
    approvedMembers: string[];
    confirmed: boolean;
    created: boolean;
    joinedAt: BigNumber;
  };

  export type RepaymentStruct = {
    id: BigNumberish;
    month: BigNumberish;
    amount: BigNumberish;
    creator: string;
    creditId: BigNumberish;
    approvedMembers: string[];
    confirmed: boolean;
    createdAt: BigNumberish;
    confirmedAt: BigNumberish;
  };

  export type RepaymentStructOutput = [
    number,
    number,
    number,
    string,
    number,
    string[],
    boolean,
    BigNumber,
    BigNumber
  ] & {
    id: number;
    month: number;
    amount: number;
    creator: string;
    creditId: number;
    approvedMembers: string[];
    confirmed: boolean;
    createdAt: BigNumber;
    confirmedAt: BigNumber;
  };
}

export interface CreditUnionInterface extends utils.Interface {
  functions: {
    "approve(uint8,uint32,uint64)": FunctionFragment;
    "approveJoin(address,uint64)": FunctionFragment;
    "createCredit(uint32,uint32,uint64)": FunctionFragment;
    "createDeposit(uint32,uint64)": FunctionFragment;
    "createJoin(string)": FunctionFragment;
    "createRepayment(uint32,uint32,uint32,uint64)": FunctionFragment;
    "createdAt()": FunctionFragment;
    "creditApprovedList(uint256)": FunctionFragment;
    "creditCounter()": FunctionFragment;
    "credits(uint256)": FunctionFragment;
    "depositApprovedList(uint256)": FunctionFragment;
    "depositCounter()": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "getCredits()": FunctionFragment;
    "getDeposits()": FunctionFragment;
    "getMembers()": FunctionFragment;
    "getMembersByAddresses(address[])": FunctionFragment;
    "getRepaymentsByCredit(uint32)": FunctionFragment;
    "isCreditApproved(uint32)": FunctionFragment;
    "memberApprovedList(address)": FunctionFragment;
    "members(address)": FunctionFragment;
    "membersList(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerName()": FunctionFragment;
    "repaymentApprovedList(uint32)": FunctionFragment;
    "repaymentCounter()": FunctionFragment;
    "repayments(uint256)": FunctionFragment;
    "totalDeposit()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "approveJoin"
      | "createCredit"
      | "createDeposit"
      | "createJoin"
      | "createRepayment"
      | "createdAt"
      | "creditApprovedList"
      | "creditCounter"
      | "credits"
      | "depositApprovedList"
      | "depositCounter"
      | "deposits"
      | "getCredits"
      | "getDeposits"
      | "getMembers"
      | "getMembersByAddresses"
      | "getRepaymentsByCredit"
      | "isCreditApproved"
      | "memberApprovedList"
      | "members"
      | "membersList"
      | "name"
      | "ownerName"
      | "repaymentApprovedList"
      | "repaymentCounter"
      | "repayments"
      | "totalDeposit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveJoin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCredit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createJoin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createRepayment",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "creditApprovedList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "credits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositApprovedList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembersByAddresses",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepaymentsByCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "memberApprovedList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(
    functionFragment: "membersList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repaymentApprovedList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repaymentCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposit",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createJoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRepayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditApprovedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositApprovedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCredits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMembersByAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepaymentsByCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreditApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberApprovedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "membersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repaymentApprovedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repaymentCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CreditUnion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditUnionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      object: BigNumberish,
      id: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveJoin(
      member: string,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createCredit(
      amount: BigNumberish,
      term: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createDeposit(
      number: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createJoin(
      username: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createRepayment(
      id: BigNumberish,
      amount: BigNumberish,
      month: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createdAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    creditApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    creditCounter(overrides?: CallOverrides): Promise<[number]>;

    credits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: number;
        amount: number;
        term: number;
        repaid: number;
        name: string;
        member: string;
        confirmed: boolean;
        createdAt: BigNumber;
        confirmedAt: BigNumber;
      }
    >;

    depositApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    depositCounter(overrides?: CallOverrides): Promise<[number]>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, boolean, BigNumber, BigNumber] & {
        member: string;
        name: string;
        amount: number;
        confirmed: boolean;
        createdAt: BigNumber;
        confirmedAt: BigNumber;
      }
    >;

    getCredits(
      overrides?: CallOverrides
    ): Promise<[CreditUnion.CreditStructOutput[]]>;

    getDeposits(
      overrides?: CallOverrides
    ): Promise<[CreditUnion.DepositStructOutput[]]>;

    getMembers(
      overrides?: CallOverrides
    ): Promise<[CreditUnion.MemberStructOutput[]]>;

    getMembersByAddresses(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<[CreditUnion.MemberStructOutput[]]>;

    getRepaymentsByCredit(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CreditUnion.RepaymentStructOutput[]]>;

    isCreditApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    memberApprovedList(
      member: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, boolean, boolean, BigNumber] & {
        contribution: number;
        name: string;
        member: string;
        confirmed: boolean;
        created: boolean;
        joinedAt: BigNumber;
      }
    >;

    membersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerName(overrides?: CallOverrides): Promise<[string]>;

    repaymentApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    repaymentCounter(overrides?: CallOverrides): Promise<[number]>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        string,
        number,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: number;
        month: number;
        amount: number;
        creator: string;
        creditId: number;
        confirmed: boolean;
        createdAt: BigNumber;
        confirmedAt: BigNumber;
      }
    >;

    totalDeposit(overrides?: CallOverrides): Promise<[number]>;
  };

  approve(
    object: BigNumberish,
    id: BigNumberish,
    dateTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveJoin(
    member: string,
    dateTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createCredit(
    amount: BigNumberish,
    term: BigNumberish,
    dateTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createDeposit(
    number: BigNumberish,
    dateTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createJoin(
    username: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createRepayment(
    id: BigNumberish,
    amount: BigNumberish,
    month: BigNumberish,
    dateTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  creditApprovedList(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  creditCounter(overrides?: CallOverrides): Promise<number>;

  credits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      id: number;
      amount: number;
      term: number;
      repaid: number;
      name: string;
      member: string;
      confirmed: boolean;
      createdAt: BigNumber;
      confirmedAt: BigNumber;
    }
  >;

  depositApprovedList(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  depositCounter(overrides?: CallOverrides): Promise<number>;

  deposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, boolean, BigNumber, BigNumber] & {
      member: string;
      name: string;
      amount: number;
      confirmed: boolean;
      createdAt: BigNumber;
      confirmedAt: BigNumber;
    }
  >;

  getCredits(
    overrides?: CallOverrides
  ): Promise<CreditUnion.CreditStructOutput[]>;

  getDeposits(
    overrides?: CallOverrides
  ): Promise<CreditUnion.DepositStructOutput[]>;

  getMembers(
    overrides?: CallOverrides
  ): Promise<CreditUnion.MemberStructOutput[]>;

  getMembersByAddresses(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<CreditUnion.MemberStructOutput[]>;

  getRepaymentsByCredit(
    _creditId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CreditUnion.RepaymentStructOutput[]>;

  isCreditApproved(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  memberApprovedList(
    member: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, boolean, boolean, BigNumber] & {
      contribution: number;
      name: string;
      member: string;
      confirmed: boolean;
      created: boolean;
      joinedAt: BigNumber;
    }
  >;

  membersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerName(overrides?: CallOverrides): Promise<string>;

  repaymentApprovedList(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  repaymentCounter(overrides?: CallOverrides): Promise<number>;

  repayments(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, string, number, boolean, BigNumber, BigNumber] & {
      id: number;
      month: number;
      amount: number;
      creator: string;
      creditId: number;
      confirmed: boolean;
      createdAt: BigNumber;
      confirmedAt: BigNumber;
    }
  >;

  totalDeposit(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    approve(
      object: BigNumberish,
      id: BigNumberish,
      dateTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveJoin(
      member: string,
      dateTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createCredit(
      amount: BigNumberish,
      term: BigNumberish,
      dateTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createDeposit(
      number: BigNumberish,
      dateTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createJoin(username: string, overrides?: CallOverrides): Promise<void>;

    createRepayment(
      id: BigNumberish,
      amount: BigNumberish,
      month: BigNumberish,
      dateTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    creditApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    creditCounter(overrides?: CallOverrides): Promise<number>;

    credits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: number;
        amount: number;
        term: number;
        repaid: number;
        name: string;
        member: string;
        confirmed: boolean;
        createdAt: BigNumber;
        confirmedAt: BigNumber;
      }
    >;

    depositApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    depositCounter(overrides?: CallOverrides): Promise<number>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, boolean, BigNumber, BigNumber] & {
        member: string;
        name: string;
        amount: number;
        confirmed: boolean;
        createdAt: BigNumber;
        confirmedAt: BigNumber;
      }
    >;

    getCredits(
      overrides?: CallOverrides
    ): Promise<CreditUnion.CreditStructOutput[]>;

    getDeposits(
      overrides?: CallOverrides
    ): Promise<CreditUnion.DepositStructOutput[]>;

    getMembers(
      overrides?: CallOverrides
    ): Promise<CreditUnion.MemberStructOutput[]>;

    getMembersByAddresses(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<CreditUnion.MemberStructOutput[]>;

    getRepaymentsByCredit(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CreditUnion.RepaymentStructOutput[]>;

    isCreditApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberApprovedList(
      member: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, boolean, boolean, BigNumber] & {
        contribution: number;
        name: string;
        member: string;
        confirmed: boolean;
        created: boolean;
        joinedAt: BigNumber;
      }
    >;

    membersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerName(overrides?: CallOverrides): Promise<string>;

    repaymentApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    repaymentCounter(overrides?: CallOverrides): Promise<number>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        string,
        number,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: number;
        month: number;
        amount: number;
        creator: string;
        creditId: number;
        confirmed: boolean;
        createdAt: BigNumber;
        confirmedAt: BigNumber;
      }
    >;

    totalDeposit(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    approve(
      object: BigNumberish,
      id: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveJoin(
      member: string,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createCredit(
      amount: BigNumberish,
      term: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createDeposit(
      number: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createJoin(
      username: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createRepayment(
      id: BigNumberish,
      amount: BigNumberish,
      month: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    creditApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditCounter(overrides?: CallOverrides): Promise<BigNumber>;

    credits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getCredits(overrides?: CallOverrides): Promise<BigNumber>;

    getDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    getMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getMembersByAddresses(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepaymentsByCredit(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCreditApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberApprovedList(
      member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    membersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerName(overrides?: CallOverrides): Promise<BigNumber>;

    repaymentApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repaymentCounter(overrides?: CallOverrides): Promise<BigNumber>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDeposit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      object: BigNumberish,
      id: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveJoin(
      member: string,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createCredit(
      amount: BigNumberish,
      term: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createDeposit(
      number: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createJoin(
      username: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createRepayment(
      id: BigNumberish,
      amount: BigNumberish,
      month: BigNumberish,
      dateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    credits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCredits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMembersByAddresses(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepaymentsByCredit(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCreditApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberApprovedList(
      member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    membersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repaymentApprovedList(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repaymentCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
