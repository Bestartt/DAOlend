/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace CreditUnion {
  export type CreditRequestStruct = {
    id: BigNumberish;
    deptor: string;
    amount: BigNumberish;
    term: BigNumberish;
    approvedMembers: string[];
    deptorAddress: string;
    creditCreated: boolean;
  };

  export type CreditRequestStructOutput = [
    number,
    string,
    number,
    number,
    string[],
    string,
    boolean
  ] & {
    id: number;
    deptor: string;
    amount: number;
    term: number;
    approvedMembers: string[];
    deptorAddress: string;
    creditCreated: boolean;
  };

  export type CreditStruct = {
    id: BigNumberish;
    deptor: string;
    amount: BigNumberish;
    term: BigNumberish;
    repaidAmount: BigNumberish;
    deptorAddress: string;
  };

  export type CreditStructOutput = [
    number,
    string,
    number,
    number,
    number,
    string
  ] & {
    id: number;
    deptor: string;
    amount: number;
    term: number;
    repaidAmount: number;
    deptorAddress: string;
  };

  export type JoinRequestStruct = {
    user: string;
    name: string;
    approvedMembers: string[];
  };

  export type JoinRequestStructOutput = [string, string, string[]] & {
    user: string;
    name: string;
    approvedMembers: string[];
  };

  export type MemberStruct = {
    contribution: BigNumberish;
    joined: boolean;
    name: string;
    _address: string;
  };

  export type MemberStructOutput = [number, boolean, string, string] & {
    contribution: number;
    joined: boolean;
    name: string;
    _address: string;
  };

  export type RepaymentStruct = {
    month: BigNumberish;
    amount: BigNumberish;
    creditId: BigNumberish;
  };

  export type RepaymentStructOutput = [number, number, number] & {
    month: number;
    amount: number;
    creditId: number;
  };
}

export interface CreditUnionInterface extends utils.Interface {
  functions: {
    "approveCreditRequest(uint32)": FunctionFragment;
    "approveJoinRequest(uint32)": FunctionFragment;
    "createCreditRequest(uint32,uint32)": FunctionFragment;
    "createJoinRequest(string)": FunctionFragment;
    "creditCounter()": FunctionFragment;
    "creditRequestCounter()": FunctionFragment;
    "creditRequests(uint256)": FunctionFragment;
    "credits(uint256)": FunctionFragment;
    "deposit(uint32)": FunctionFragment;
    "getApprovedMembers(uint32)": FunctionFragment;
    "getApprovedMembersForJoinRequest(uint256)": FunctionFragment;
    "getCreditRequests()": FunctionFragment;
    "getCredits()": FunctionFragment;
    "getJoinRequests()": FunctionFragment;
    "getMembers()": FunctionFragment;
    "getPercentForMember(address)": FunctionFragment;
    "getRepaymentsByCredit(uint32)": FunctionFragment;
    "isCreditRequestApproved(uint32)": FunctionFragment;
    "joinRequests(uint256)": FunctionFragment;
    "members(address)": FunctionFragment;
    "membersList(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerName()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint32,uint32,uint32)": FunctionFragment;
    "repaymentCounter()": FunctionFragment;
    "repayments(uint256)": FunctionFragment;
    "totalDeposit()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveCreditRequest"
      | "approveJoinRequest"
      | "createCreditRequest"
      | "createJoinRequest"
      | "creditCounter"
      | "creditRequestCounter"
      | "creditRequests"
      | "credits"
      | "deposit"
      | "getApprovedMembers"
      | "getApprovedMembersForJoinRequest"
      | "getCreditRequests"
      | "getCredits"
      | "getJoinRequests"
      | "getMembers"
      | "getPercentForMember"
      | "getRepaymentsByCredit"
      | "isCreditRequestApproved"
      | "joinRequests"
      | "members"
      | "membersList"
      | "name"
      | "owner"
      | "ownerName"
      | "renounceOwnership"
      | "repay"
      | "repaymentCounter"
      | "repayments"
      | "totalDeposit"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveCreditRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveJoinRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCreditRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createJoinRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditRequestCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedMembers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedMembersForJoinRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJoinRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPercentForMember",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepaymentsByCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditRequestApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(
    functionFragment: "membersList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repaymentCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveCreditRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveJoinRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCreditRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createJoinRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditRequestCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedMembersForJoinRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCredits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getJoinRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPercentForMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepaymentsByCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreditRequestApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "membersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repaymentCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CreditUnion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditUnionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveCreditRequest(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveJoinRequest(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createCreditRequest(
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createJoinRequest(
      username: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    creditCounter(overrides?: CallOverrides): Promise<[number]>;

    creditRequestCounter(overrides?: CallOverrides): Promise<[number]>;

    creditRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, number, string, boolean] & {
        id: number;
        deptor: string;
        amount: number;
        term: number;
        deptorAddress: string;
        creditCreated: boolean;
      }
    >;

    credits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, number, number, string] & {
        id: number;
        deptor: string;
        amount: number;
        term: number;
        repaidAmount: number;
        deptorAddress: string;
      }
    >;

    deposit(
      number: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getApprovedMembers(
      Id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getApprovedMembersForJoinRequest(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCreditRequests(
      overrides?: CallOverrides
    ): Promise<[CreditUnion.CreditRequestStructOutput[]]>;

    getCredits(
      overrides?: CallOverrides
    ): Promise<[CreditUnion.CreditStructOutput[]]>;

    getJoinRequests(
      overrides?: CallOverrides
    ): Promise<[CreditUnion.JoinRequestStructOutput[]]>;

    getMembers(
      overrides?: CallOverrides
    ): Promise<[CreditUnion.MemberStructOutput[]]>;

    getPercentForMember(
      member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRepaymentsByCredit(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CreditUnion.RepaymentStructOutput[]]>;

    isCreditRequestApproved(
      Id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { user: string; name: string }>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, string] & {
        contribution: number;
        joined: boolean;
        name: string;
        _address: string;
      }
    >;

    membersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerName(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repay(
      id: BigNumberish,
      amount: BigNumberish,
      month: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repaymentCounter(overrides?: CallOverrides): Promise<[number]>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        month: number;
        amount: number;
        creditId: number;
      }
    >;

    totalDeposit(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  approveCreditRequest(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveJoinRequest(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createCreditRequest(
    amount: BigNumberish,
    term: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createJoinRequest(
    username: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  creditCounter(overrides?: CallOverrides): Promise<number>;

  creditRequestCounter(overrides?: CallOverrides): Promise<number>;

  creditRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, number, number, string, boolean] & {
      id: number;
      deptor: string;
      amount: number;
      term: number;
      deptorAddress: string;
      creditCreated: boolean;
    }
  >;

  credits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, number, number, number, string] & {
      id: number;
      deptor: string;
      amount: number;
      term: number;
      repaidAmount: number;
      deptorAddress: string;
    }
  >;

  deposit(
    number: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getApprovedMembers(
    Id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getApprovedMembersForJoinRequest(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCreditRequests(
    overrides?: CallOverrides
  ): Promise<CreditUnion.CreditRequestStructOutput[]>;

  getCredits(
    overrides?: CallOverrides
  ): Promise<CreditUnion.CreditStructOutput[]>;

  getJoinRequests(
    overrides?: CallOverrides
  ): Promise<CreditUnion.JoinRequestStructOutput[]>;

  getMembers(
    overrides?: CallOverrides
  ): Promise<CreditUnion.MemberStructOutput[]>;

  getPercentForMember(
    member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRepaymentsByCredit(
    _creditId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CreditUnion.RepaymentStructOutput[]>;

  isCreditRequestApproved(
    Id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { user: string; name: string }>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, string, string] & {
      contribution: number;
      joined: boolean;
      name: string;
      _address: string;
    }
  >;

  membersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerName(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repay(
    id: BigNumberish,
    amount: BigNumberish,
    month: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repaymentCounter(overrides?: CallOverrides): Promise<number>;

  repayments(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      month: number;
      amount: number;
      creditId: number;
    }
  >;

  totalDeposit(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveCreditRequest(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveJoinRequest(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createCreditRequest(
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createJoinRequest(
      username: string,
      overrides?: CallOverrides
    ): Promise<void>;

    creditCounter(overrides?: CallOverrides): Promise<number>;

    creditRequestCounter(overrides?: CallOverrides): Promise<number>;

    creditRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, number, string, boolean] & {
        id: number;
        deptor: string;
        amount: number;
        term: number;
        deptorAddress: string;
        creditCreated: boolean;
      }
    >;

    credits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, number, number, string] & {
        id: number;
        deptor: string;
        amount: number;
        term: number;
        repaidAmount: number;
        deptorAddress: string;
      }
    >;

    deposit(number: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getApprovedMembers(
      Id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getApprovedMembersForJoinRequest(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCreditRequests(
      overrides?: CallOverrides
    ): Promise<CreditUnion.CreditRequestStructOutput[]>;

    getCredits(
      overrides?: CallOverrides
    ): Promise<CreditUnion.CreditStructOutput[]>;

    getJoinRequests(
      overrides?: CallOverrides
    ): Promise<CreditUnion.JoinRequestStructOutput[]>;

    getMembers(
      overrides?: CallOverrides
    ): Promise<CreditUnion.MemberStructOutput[]>;

    getPercentForMember(
      member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepaymentsByCredit(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CreditUnion.RepaymentStructOutput[]>;

    isCreditRequestApproved(
      Id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { user: string; name: string }>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, string] & {
        contribution: number;
        joined: boolean;
        name: string;
        _address: string;
      }
    >;

    membersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerName(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      id: BigNumberish,
      amount: BigNumberish,
      month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repaymentCounter(overrides?: CallOverrides): Promise<number>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        month: number;
        amount: number;
        creditId: number;
      }
    >;

    totalDeposit(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approveCreditRequest(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveJoinRequest(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createCreditRequest(
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createJoinRequest(
      username: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    creditCounter(overrides?: CallOverrides): Promise<BigNumber>;

    creditRequestCounter(overrides?: CallOverrides): Promise<BigNumber>;

    creditRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      number: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getApprovedMembers(
      Id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedMembersForJoinRequest(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getCredits(overrides?: CallOverrides): Promise<BigNumber>;

    getJoinRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getPercentForMember(
      member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepaymentsByCredit(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCreditRequestApproved(
      Id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    membersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerName(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repay(
      id: BigNumberish,
      amount: BigNumberish,
      month: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repaymentCounter(overrides?: CallOverrides): Promise<BigNumber>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveCreditRequest(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveJoinRequest(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createCreditRequest(
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createJoinRequest(
      username: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    creditCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditRequestCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    credits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      number: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getApprovedMembers(
      Id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedMembersForJoinRequest(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCredits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJoinRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPercentForMember(
      member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepaymentsByCredit(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCreditRequestApproved(
      Id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    membersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repay(
      id: BigNumberish,
      amount: BigNumberish,
      month: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repaymentCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
